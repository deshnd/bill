(source_file "main.swift"
  (top_level_code_decl range=[main.swift:3:1 - line:3:24]
    (brace_stmt implicit range=[main.swift:3:1 - line:3:24]
      (pattern_binding_decl range=[main.swift:3:1 - line:3:24]
        (pattern_typed type='Int'
          (pattern_named type='Int' 'upperLimit')
          (type_ident id='Int' bind=Swift.(file).Int))
        Original init:
        (integer_literal_expr type='Int' location=main.swift:3:24 range=[main.swift:3:24 - line:3:24] value=8 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:3:24 range=[main.swift:3:24 - line:3:24] value=8 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:3:5 - line:3:5] "upperLimit" type='Int' interface type='Int' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:6:1 - line:6:9]
    (brace_stmt implicit range=[main.swift:6:1 - line:6:9]
      (pattern_binding_decl range=[main.swift:6:1 - line:6:9]
        (pattern_named type='Int' 'x')
        Original init:
        (unresolved_decl_ref_expr type='<null>' name=upperLimit function_ref=unapplied)
        Processed init:
        (declref_expr type='Int' location=main.swift:6:9 range=[main.swift:6:9 - line:6:9] decl=main.(file).upperLimit@main.swift:3:5 function_ref=unapplied))
))
  (var_decl range=[main.swift:6:5 - line:6:5] "x" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:7:1 - line:7:13]
    (brace_stmt implicit range=[main.swift:7:1 - line:7:13]
      (pattern_binding_decl range=[main.swift:7:1 - line:7:13]
        (pattern_named type='Int' 'y')
        Original init:
        (sequence_expr type='<null>'
          (integer_literal_expr type='Int' location=main.swift:7:9 range=[main.swift:7:9 - line:7:9] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
          (overloaded_decl_ref_expr type='<null>' name=+ number_of_decls=35 function_ref=single)
          (declref_expr type='<null>' decl=main.(file).x@main.swift:6:5 function_ref=unapplied))
        Processed init:
        (binary_expr type='Int' location=main.swift:7:11 range=[main.swift:7:9 - line:7:13] nothrow
          (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=main.swift:7:11 range=[main.swift:7:11 - line:7:11] nothrow
            (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=main.swift:7:11 range=[main.swift:7:11 - line:7:11] decl=Swift.(file).Int extension.+ function_ref=single)
            (argument_list implicit
              (argument
                (type_expr implicit type='Int.Type' location=main.swift:7:11 range=[main.swift:7:11 - line:7:11] typerepr='Int'))))
          (argument_list implicit
            (argument
              (integer_literal_expr type='Int' location=main.swift:7:9 range=[main.swift:7:9 - line:7:9] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
            (argument
              (load_expr implicit type='Int' location=main.swift:7:13 range=[main.swift:7:13 - line:7:13]
                (declref_expr type='@lvalue Int' location=main.swift:7:13 range=[main.swift:7:13 - line:7:13] decl=main.(file).x@main.swift:6:5 function_ref=unapplied))))))
))
  (var_decl range=[main.swift:7:5 - line:7:5] "y" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:8:1 - line:11:19]
    (brace_stmt implicit range=[main.swift:8:1 - line:11:19]
      (repeat_while_stmt range=[main.swift:8:1 - line:11:19]
        (brace_stmt range=[main.swift:8:9 - line:11:5]
          (call_expr type='()' location=main.swift:9:5 range=[main.swift:9:5 - line:9:32] nothrow
            (declref_expr type='(Any..., String, String) -> ()' location=main.swift:9:5 range=[main.swift:9:5 - line:9:5] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
            (argument_list labels=_:separator:terminator:
              (argument
                (vararg_expansion_expr implicit type='Any...' location=main.swift:9:11 range=[main.swift:9:11 - line:9:11]
                  (array_expr implicit type='Any...' location=main.swift:9:11 range=[main.swift:9:11 - line:9:11] initializer=**NULL**
                    (erasure_expr implicit type='Any' location=main.swift:9:11 range=[main.swift:9:11 - line:9:11]
                      (interpolated_string_literal_expr type='String' location=main.swift:9:11 range=[main.swift:9:11 - line:9:11] trailing_quote_loc=main.swift:9:31 literal_capacity=15 interpolation_count=1 builder_init=Swift.(file).DefaultStringInterpolation.init(literalCapacity:interpolationCount:) result_init=Swift.(file).String extension.init(stringInterpolation:)
                        (tap_expr implicit type='DefaultStringInterpolation' location=main.swift:9:11 range=[main.swift:9:11 - line:9:11] var=main.(file).top-level code.$interpolation
                          (opaque_value_expr implicit type='DefaultStringInterpolation' location=main.swift:9:11 range=[main.swift:9:11 - line:9:11] @ 0x5578666e5890)
                          (brace_stmt implicit range=[main.swift:9:11 - line:9:11]
                            (var_decl implicit "$interpolation" type='DefaultStringInterpolation' interface type='DefaultStringInterpolation' access=fileprivate readImpl=stored writeImpl=stored readWriteImpl=stored)

                            (call_expr implicit type='()' location=main.swift:9:12 range=[main.swift:9:12 - line:9:11] nothrow
                              (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:9:12 range=[main.swift:9:12 - line:9:12] nothrow
                                (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=double)
                                (argument_list implicit
                                  (argument inout
                                    (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:9:12 range=[main.swift:9:12 - line:9:12]
                                      (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:9:12 range=[main.swift:9:12 - line:9:12] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))))
                              (argument_list implicit
                                (argument
                                  (string_literal_expr type='String' location=main.swift:9:11 range=[main.swift:9:11 - line:9:11] encoding=utf8 value="Orbiting " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))))
                            (call_expr type='()' location=main.swift:9:22 range=[main.swift:9:22 - line:9:24] nothrow
                              (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:9:22 range=[main.swift:9:22 - line:9:22] nothrow
                                (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:9:22 range=[main.swift:9:22 - line:9:22] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=double)
                                (argument_list implicit
                                  (argument inout
                                    (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:9:22 range=[main.swift:9:22 - line:9:22]
                                      (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:9:22 range=[main.swift:9:22 - line:9:22] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))))
                              (argument_list
                                (argument
                                  (load_expr implicit type='Int' location=main.swift:9:23 range=[main.swift:9:23 - line:9:23]
                                    (declref_expr type='@lvalue Int' location=main.swift:9:23 range=[main.swift:9:23 - line:9:23] decl=main.(file).y@main.swift:7:5 function_ref=unapplied)))))
                            (call_expr implicit type='()' location=main.swift:9:25 range=[main.swift:9:25 - line:9:25] nothrow
                              (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:9:25 range=[main.swift:9:25 - line:9:25] nothrow
                                (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=double)
                                (argument_list implicit
                                  (argument inout
                                    (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:9:25 range=[main.swift:9:25 - line:9:25]
                                      (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:9:25 range=[main.swift:9:25 - line:9:25] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))))
                              (argument_list implicit
                                (argument
                                  (string_literal_expr type='String' location=main.swift:9:25 range=[main.swift:9:25 - line:9:25] encoding=utf8 value=" times" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))))))))
              (argument label=separator
                (default_argument_expr implicit type='String' location=main.swift:9:10 range=[main.swift:9:10 - line:9:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=1))
              (argument label=terminator
                (default_argument_expr implicit type='String' location=main.swift:9:10 range=[main.swift:9:10 - line:9:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=2))))
          (binary_expr type='()' location=main.swift:10:10 range=[main.swift:10:8 - line:10:13] nothrow
            (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:10:10 range=[main.swift:10:10 - line:10:10] nothrow
              (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:10:10 range=[main.swift:10:10 - line:10:10] decl=Swift.(file).Int.-= function_ref=single)
              (argument_list implicit
                (argument
                  (type_expr implicit type='Int.Type' location=main.swift:10:10 range=[main.swift:10:10 - line:10:10] typerepr='Int'))))
            (argument_list implicit
              (argument inout
                (inout_expr implicit type='inout Int' location=main.swift:10:8 range=[main.swift:10:8 - line:10:8]
                  (declref_expr type='@lvalue Int' location=main.swift:10:8 range=[main.swift:10:8 - line:10:8] decl=main.(file).x@main.swift:6:5 function_ref=unapplied)))
              (argument
                (integer_literal_expr type='Int' location=main.swift:10:13 range=[main.swift:10:13 - line:10:13] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))))
        (paren_expr type='(Bool)' location=main.swift:11:16 range=[main.swift:11:13 - line:11:19]
          (binary_expr type='Bool' location=main.swift:11:16 range=[main.swift:11:14 - line:11:18] nothrow
            (dot_syntax_call_expr implicit type='(Int, Int) -> Bool' location=main.swift:11:16 range=[main.swift:11:16 - line:11:16] nothrow
              (declref_expr type='(Int.Type) -> (Int, Int) -> Bool' location=main.swift:11:16 range=[main.swift:11:16 - line:11:16] decl=Swift.(file).Int extension.> function_ref=single)
              (argument_list implicit
                (argument
                  (type_expr implicit type='Int.Type' location=main.swift:11:16 range=[main.swift:11:16 - line:11:16] typerepr='Int'))))
            (argument_list implicit
              (argument
                (load_expr implicit type='Int' location=main.swift:11:14 range=[main.swift:11:14 - line:11:14]
                  (declref_expr type='@lvalue Int' location=main.swift:11:14 range=[main.swift:11:14 - line:11:14] decl=main.(file).x@main.swift:6:5 function_ref=unapplied)))
              (argument
                (integer_literal_expr type='Int' location=main.swift:11:18 range=[main.swift:11:18 - line:11:18] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))))))))