(source_file "main.swift"
  (top_level_code_decl range=[main.swift:1:1 - line:1:9]
    (brace_stmt implicit range=[main.swift:1:1 - line:1:9]
      (pattern_binding_decl range=[main.swift:1:1 - line:1:9]
        (pattern_named type='Int' 'x')
        Original init:
        (integer_literal_expr type='Int' location=main.swift:1:9 range=[main.swift:1:9 - line:1:9] value=5 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:1:9 range=[main.swift:1:9 - line:1:9] value=5 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:1:5 - line:1:5] "x" type='Int' interface type='Int' access=internal readImpl=stored writeImpl=stored readWriteImpl=stored)
  (top_level_code_decl range=[main.swift:2:1 - line:5:1]
    (brace_stmt implicit range=[main.swift:2:1 - line:5:1]
      (while_stmt range=[main.swift:2:1 - line:5:1]
        (binary_expr type='Bool' location=main.swift:2:9 range=[main.swift:2:7 - line:2:11] nothrow
          (dot_syntax_call_expr implicit type='(Int, Int) -> Bool' location=main.swift:2:9 range=[main.swift:2:9 - line:2:9] nothrow
            (declref_expr type='(Int.Type) -> (Int, Int) -> Bool' location=main.swift:2:9 range=[main.swift:2:9 - line:2:9] decl=Swift.(file).Int extension.> function_ref=single)
            (argument_list implicit
              (argument
                (type_expr implicit type='Int.Type' location=main.swift:2:9 range=[main.swift:2:9 - line:2:9] typerepr='Int'))))
          (argument_list implicit
            (argument
              (load_expr implicit type='Int' location=main.swift:2:7 range=[main.swift:2:7 - line:2:7]
                (declref_expr type='@lvalue Int' location=main.swift:2:7 range=[main.swift:2:7 - line:2:7] decl=main.(file).x@main.swift:1:5 function_ref=unapplied)))
            (argument
              (integer_literal_expr type='Int' location=main.swift:2:11 range=[main.swift:2:11 - line:2:11] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))))
        (brace_stmt range=[main.swift:2:13 - line:5:1]
          (call_expr type='()' location=main.swift:3:5 range=[main.swift:3:5 - line:3:26] nothrow
            (declref_expr type='(Any..., String, String) -> ()' location=main.swift:3:5 range=[main.swift:3:5 - line:3:5] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
            (argument_list labels=_:separator:terminator:
              (argument
                (vararg_expansion_expr implicit type='Any...' location=main.swift:3:11 range=[main.swift:3:11 - line:3:11]
                  (array_expr implicit type='Any...' location=main.swift:3:11 range=[main.swift:3:11 - line:3:11] initializer=**NULL**
                    (erasure_expr implicit type='Any' location=main.swift:3:11 range=[main.swift:3:11 - line:3:11]
                      (string_literal_expr type='String' location=main.swift:3:11 range=[main.swift:3:11 - line:3:11] encoding=utf8 value="Hello, World!" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))
              (argument label=separator
                (default_argument_expr implicit type='String' location=main.swift:3:10 range=[main.swift:3:10 - line:3:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=1))
              (argument label=terminator
                (default_argument_expr implicit type='String' location=main.swift:3:10 range=[main.swift:3:10 - line:3:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=2))))
          (binary_expr type='()' location=main.swift:4:7 range=[main.swift:4:5 - line:4:10] nothrow
            (dot_syntax_call_expr implicit type='(inout Int, Int) -> ()' location=main.swift:4:7 range=[main.swift:4:7 - line:4:7] nothrow
              (declref_expr type='(Int.Type) -> (inout Int, Int) -> ()' location=main.swift:4:7 range=[main.swift:4:7 - line:4:7] decl=Swift.(file).Int.-= function_ref=single)
              (argument_list implicit
                (argument
                  (type_expr implicit type='Int.Type' location=main.swift:4:7 range=[main.swift:4:7 - line:4:7] typerepr='Int'))))
            (argument_list implicit
              (argument inout
                (inout_expr implicit type='inout Int' location=main.swift:4:5 range=[main.swift:4:5 - line:4:5]
                  (declref_expr type='@lvalue Int' location=main.swift:4:5 range=[main.swift:4:5 - line:4:5] decl=main.(file).x@main.swift:1:5 function_ref=unapplied)))
              (argument
                (integer_literal_expr type='Int' location=main.swift:4:10 range=[main.swift:4:10 - line:4:10] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))))))))