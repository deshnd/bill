================================================================================
1. In the expression: let x = 3, "x" will be of type:
------------------------------------------------------------
	A.  Double
	B.  Boolean
	C.  String
	D.  Int

================================================================================
2. Type-safety prevents the compiler from warning us when we make a mistake.
------------------------------------------------------------
	A.  True
	B.  False

================================================================================
3. In the expression, "let m = 0o17", "m" will be of type:
------------------------------------------------------------
	A.  Double
	B.  Int
	C.  Boolean
	D.  String

================================================================================
4. In the expression: let x = 3.0, "x" will be of type:
------------------------------------------------------------
	A.  Int
	B.  Boolean
	C.  String
	D.  Double

================================================================================
5. A valid expression will yield a value of a specific type according to the rules of the language.
------------------------------------------------------------
	A.  True
	B.  False

================================================================================
6. In the expression: let x = "3.0", "x" will be of type:
------------------------------------------------------------
	A.  Int
	B.  Double
	C.  String
	D.  Boolean

================================================================================
7. Type inference will rely on the literal value(s) or named value(s) to determine the type.
------------------------------------------------------------
	A.  True
	B.  False

================================================================================
8. On 32-bit platforms, Int will be equivalent to Int32.
------------------------------------------------------------
	A.  True
	B.  False

================================================================================
9. In the expression, "let n = 0b101", "n" will be of type:
------------------------------------------------------------
	A.  Double
	B.  Int
	C.  String
	D.  Boolean

================================================================================
10. A leading zero in front of an Int or Double will alter the value of the literal.
------------------------------------------------------------
	A.  True
	B.  False

================================================================================
11. In the expression: let x = false, "x" will be of type:
------------------------------------------------------------
	A.  Int
	B.  String
	C.  Boolean
	D.  Double

================================================================================
12. In the expression, "let p = 0x2F", "p" will be of type:
------------------------------------------------------------
	A.  String
	B.  Int
	C.  Boolean
	D.  Double

================================================================================
13. In Swift, we're able to use explicit typing to ensure that we're evaluating the expression as the desired type.
------------------------------------------------------------
	A.  True
	B.  False

================================================================================
14. In the expression, "let f = 1.23e5", "f" will be of type:
------------------------------------------------------------
	A.  String
	B.  Boolean
	C.  Int
	D.  Double

================================================================================
15. In the expression, "let g = 0xFp3", "g" will be of type:
------------------------------------------------------------
	A.  Boolean
	B.  Int
	C.  Double
	D.  String

================================================================================
16. In the expression let q = "123" + "456", "q" will have the value:
------------------------------------------------------------
	A.  "123+456"
	B.  "579"
	C.  "123456"
	D.  579

================================================================================
17. An expression is a finite series of symbols that is well-formed according to agreed upon rules.
------------------------------------------------------------
	A.  True
	B.  False

================================================================================
18. In Swift, floating point numbers may be specified in decimal, octal, or hexadecimal.
------------------------------------------------------------
	A.  True
	B.  False

================================================================================
19. On 64-bit platforms, Int will be equivalent to Int64.
------------------------------------------------------------
	A.  True
	B.  False

================================================================================
20. In an expression, symbols may include constants, variables, operators, and brackets.
------------------------------------------------------------
	A.  True
	B.  False
